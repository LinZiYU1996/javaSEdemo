


们已知的RTTI形式包括：
1)传统的类型转换，如"(Shape)",由RTTI确保类型转换的正确性，如果执行了一个错误
的类型转换，就会抛出一个ClassCastException异常。

代表对象的类型的Class对象。通过查询Class对象可以获取运行时所需的信息。
在C++中，经典的类型转换"(Shape)"并不使用RTII。它只是简单地告诉编译器将这个对

象作为新的类型对待。而Java要执行类型检查，这通常被称为＂类型安全的向下转型”。之所以
向下转型  ，是由千类层次结构图从来就是这么排列的。



RITI在Java中还有第三种形式，就是关键字instanceof。
返回一个布尔值，告诉我们对象是不是某个特定类型的实例。可
以用提问的方式使用它，就像这样：
if(x instanceof Dog) ((Dog)x). bark();

在将x转型成一个Dog前，上面的if语句会检查对象x是否从属千Dog类。
进行向下转型前，如果没有其他信息可以告诉你这个对象是什么类型，
那么使用instanceof是非常重要的，否则会得到一个ClassCastException异常。



