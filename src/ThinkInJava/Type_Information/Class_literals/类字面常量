

Java还提供了另一种方法来生成对Class对象的引用，即使用类字面常量。对上述程序来说，就像下面这样：

FancyToy.class;


这样做不仅更简单，而且更安全，因为它在编译时就会受到检查（因此不需要置千t盯语句块中）。
并且它根除了对forName()方法的调用，所以也更高效。

类字面常量不仅可以应用千普通的类，也可以应用千接口、数组以及基本数据类型。另外， 对千基本数据类型的包装器类，
还有一个标准字段T订屯.TYPE字段是一个引用，指向对应的基本数据类型的Class对象，

点很有趣， 当使用 ".class" 来创建对Class对象的引用时， 不会自动地初始化该

Class对象。 为了使用类而做的准备工作实际包含三个步骤：
1. 加载， 这是由类加载器执行的。 该步骤将查找字节码（通常在classpath所指定的路径中查
找，但这并非是必需的）， 并从这些字节码中创建一个Class对象。
2. 链接。 在链接阶段将验证类中的字节码， 为静态域分配存储空间， 并且如果必蒂的话，
将解析这个类创建的对其他类的所有引用。

3. 初始化。 如果该类具有超类，则对其初始化，执行静态初始化器和静态初始化块。
初始化被延迟到了对静态方法（构造器隐式地是静态的）或者非常数静态域进行首次引用

