


任何容器类， 都必须有某种方式可以插人元素并将它们再次取回。
 毕竟，持有事物是容器最基本的工作。 对千List, add0是插人元素的方法之一，
 而getO是取出元素的方法之一。
如果从更高层的角度思考，会发现这里有个缺点：要使用容器，必须对容器的确切类型编程。
 初看起来这没什么不好， 但是考虑下面的情况：如果原本是对若List编码的，
 但是后来发现如果能够把相同的代码应用千Set, 将会显得非常方便， 此时应该怎么做？
或者打算从头开始编写通用的代码， 它们只是使用容器，不知道或者说不关心容器的类型，
 那么如何才能不重写代 码就可以应用千不同类型的容器？
迭代岛（也是一种设计模式）的概念可以用于达成此目的。 迭代器是一个对象，它的工作
 是遍历并选择序列中的对象， 而客户端程序员不必知道或关心该序列底层的结构。 此外，
 迭代器通常被称为轻量级对象： 创建它的代价小。 因此， 经常可以见到对迭代器有些奇怪的限制，
 例如， Java的Iterator只能单向移动，这个Iterator只能用来：

 􀃇􀃈	使用方法iterator◊要求容器返回一个Iterator。 Iterator将准备好返回序列的第一个元素。
 2)	使用nextO获得序列中的下一个元素。
 3)	使用hasNextO检查序列中是否还有元素。
 4)	使用remove()将迭代器新近返回的元素删除。