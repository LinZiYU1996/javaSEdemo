
我们知道Java语言中一个类只能继承一个父类，但是一个类可以实现多个接口。随着默认方
法在Java 8中引入，有可能出现一个类继承了多个方法而它们使用的却是同样的函数签名。这种
情况下，类会选择使用哪一个函数？在实际情况中，像这样的冲突可能极少发生，但是一旦发生
这样的状况，必须要有一套规则来确定按照什么样的约定处理这些冲突。这一节中，我们会介绍
Java编译器如何解决这种潜在的冲突。我们试图回答像“接下来的代码中，哪一个hello方法是
被C类调用的”这样的问题。注意，接下来的例子主要用于说明容易出问题的场景，并不表示这
些场景在实际开发过程中会经常发生


public interface A {
 default void hello() {
 System.out.println("Hello from A");
 }
}
public interface B extends A {
 default void hello() {
 System.out.println("Hello from B");
 }
}
public class C implements B, A {
 public static void main(String... args) {
 new C().hello();
 }
}

这个例子中C类同时实现了B接口和A接口，而这两个接口
恰巧又都定义了名为hello的默认方法。另外，B继承自A。

编译器会使用声明的哪一个hello方法呢？按照规则(2)，应该选择的是提供了最具体实现的
默认方法的接口。由于B比A更具体，所以应该选择B的hello方法。所以，程序会打印输出“Hello
from B”。


现在，我们看看如果C像下面这样（如图9-6所示）继承自D，会发生什么情况：
public class D implements A{ }
public class C extends D implements B, A {
 public static void main(String... args) {
 new C().hello();
 }
}


依据规则(1)，类中声明的方法具有更高的优先级。D并未覆盖hello方法，可是它实现了接
口A。所以它就拥有了接口A的默认方法。规则(2)说如果类或者父类没有对应的方法，那么就应
该选择提供了最具体实现的接口中的方法。因此，编译器会在接口A和接口B的hello方法之间做
选择。由于B更加具体，所以程序会再次打印输出“Hello from B”。



解决问题的三条规则

如果一个类使用相同的函数签名从多个地方（比如另一个类或接口）继承了方法，通过三条
规则可以进行判断。

(1) 类中的方法优先级最高。类或父类中声明的方法的优先级高于任何声明为默认方法的优先级。

(2) 如果无法依据第一条进行判断，那么子接口的优先级更高：函数签名相同时，优先选择拥有最具体实现的默认方法的接口，即如果B继承了A，那么B就比A更加具体。

(3) 最后，如果还是无法判断，继承了多个接口的类必须通过显式覆盖和调用期望的方法显式地选择使用哪一个默认方法的实现















































