





对于下列函数描述符（即Lambda表达式的签名），你会使用哪些函数式接口？在表3-2中
可以找到大部分答案。作为进一步练习，请构造一个可以利用这些函数式接口的有效Lambda
表达式：
(1) T->R
(2) (int, int)->int
(3) T->void
(4) ()->T
(5) (T, U)->R


答案如下。

(1) Function<T,R>不错。它一般用于将类型T的对象转换为类型R的对象（比如
Function<Apple, Integer>用来提取苹果的重量）。

(2) IntBinaryOperator具有唯一一个抽象方法，叫作applyAsInt，它代表的函数描述
符是(int, int) -> int。

(3) Consumer<T>具有唯一一个抽象方法叫作accept，代表的函数描述符是T -> void。

(4) Supplier<T>具有唯一一个抽象方法叫作get，代表的函数描述符是()-> T。或者，
Callable<T>具有唯一一个抽象方法叫作call，代表的函数描述符是() -> T。

(5) BiFunction<T, U, R>具有唯一一个抽象方法叫作apply，代表的函数描述符是(T,
U) -> R。




使用案例                     Lambda 的例子                                                 对应的函数式接口
布尔表达式            (List<String> list) -> list.isEmpty()                                   Predicate<List<String>>

创建对象                () -> new Apple(10)                                                  Supplier<Apple>

消费一个对象               (Apple a) ->System.out.println(a.getWeight())                      Consumer<Apple>


从一个对象中
选择/提取               (String s) -> s.length()                                            Function<String, Integer>或ToIntFunction<String>


合并两个值               (int a, int b) -> a * b                                                     IntBinaryOperator


比较两个对象                  (Apple a1, Apple a2) ->a1.getWeight().compareTo(a2.getWeight())                 Comparator<Apple>或BiFunction<Apple, Apple, Integer>或 ToIntBiFunction<Apple, Apple




异常、Lambda，还有函数式接口又是怎么回事呢？
请注意，任何函数式接口都不允许抛出受检异常（checked exception）。如果你需要Lambda
表达式来抛出异常，有两种办法：定义一个自己的函数式接口，并声明受检异常，或者把Lambda
包在一个try/catch块中。
比如，在3.3节我们介绍了一个新的函数式接口BufferedReaderProcessor，它显式声
明了一个IOException：
@FunctionalInterface
public interface BufferedReaderProcessor {
 String process(BufferedReader b) throws IOException;
}
BufferedReaderProcessor p = (BufferedReader br) -> br.readLine();
但是你可能是在使用一个接受函数式接口的API，比如Function<T, R>，没有办法自己
创建一个（你会在下一章看到，Stream API中大量使用表3-2中的函数式接口）。这种情况下，
你可以显式捕捉受检异常：
Function<BufferedReader, String> f = (BufferedReader b) -> {
 try {
 return b.readLine();
 }
 catch(IOException e) {
 throw new RuntimeException(e);
 }
};










