




最终，我们刚才讨论的无法预知的变量修改问题，都源于共享的数据结构被你所维护的代码
中的多个方法读取和更新。假设几个类同时都保存了指向某个列表的引用。那么到底谁对这个列
表拥有所属权呢？如果一个类对它进行了修改，会发生什么情况？其他的类预期会发生这种变化
吗？其他的类又如何得知列表发生了修改呢？我们需要通知使用该列表的所有类这一变化吗？
抑或是不是每个类都应该为自己准备一份防御式的数据备份以备不时之需呢？换句话说，由于使
用了可变的共享数据结构，我们很难追踪你程序的各个组成部分所发生的变化。





假设有这样一个系统，它不修改任何数据。维护这样的一个系统将是一个无以伦比的美梦，
因为你不再会收到任何由于某些对象在某些地方修改了某个数据结构而导致的意外报告。如果一
个方法既不修改它内嵌类的状态，也不修改其他对象的状态，使用return返回所有的计算结果，
那么我们称其为纯粹的或者无副作用的。
更确切地讲，到底哪些因素会造成副作用呢？简而言之，副作用就是函数的效果已经超出了
函数自身的范畴。下面是一些例子。



 除了构造器内的初始化操作，对类中数据结构的任何修改，包括字段的赋值操作（一个
典型的例子是setter方法）。

 抛出一个异常。

 进行输入/输出操作，比如向一个文件写数据。
从另一个角度来看“无副作用”的话，我们就应该考虑不可变对象。不可变对象是这样一种
对象，它们一旦完成初始化就不会被任何方法修改状态。这意味着一旦一个不可变对象初始化完
毕，它永远不会进入到一个无法预期的状态。你可以放心地共享它，无需保留任何副本，并且由
于它们不会被修改，还是线程安全的










