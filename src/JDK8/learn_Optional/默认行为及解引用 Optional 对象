

采用orElse方法读取这个变量的值，使用这种方式你还可以定义一个默认值，遭
遇空的Optional变量时，默认值会作为该方法的调用返回值。Optional类提供了多种方法读取
Optional实例中的变量值。
 get()是这些方法中最简单但又最不安全的方法。如果变量存在，它直接返回封装的变量
值，否则就抛出一个NoSuchElementException异常。所以，除非你非常确定Optional
变量一定包含值，否则使用这个方法是个相当糟糕的主意。此外，这种方式即便相对于
嵌套式的null检查，也并未体现出多大的改进。
 orElse(T other)是我们在代码清单10-5中使用的方法，正如之前提到的，它允许你在
Optional对象不包含值时提供一个默认值。
 orElseGet(Supplier<? extends T> other)是orElse方法的延迟调用版，Supplier
方法只有在Optional对象不含值时才执行调用。如果创建默认值是件耗时费力的工作，
你应该考虑采用这种方式（借此提升程序的性能），或者你需要非常确定某个方法仅在
Optional为空时才进行调用，也可以考虑该方式（这种情况有严格的限制条件）。
 orElseThrow(Supplier<? extends X> exceptionSupplier)和get方法非常类似，
它们遭遇Optional对象为空时都会抛出一个异常，但是使用orElseThrow你可以定制希
望抛出的异常类型。
 ifPresent(Consumer<? super T>)让你能在变量值存在时执行一个作为参数传入的
方法，否则就不进行任何操作。
Optional类和Stream接口的相似之处，远不止map和flatMap这两个方法。还有第三个方
法filter，它的行为在两种类型之间也极其相似，



