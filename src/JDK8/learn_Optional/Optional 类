



Java 8中引入了一个新的类java.util.Optional<T>。这
是一个封装Optional值的类。举例来说，使用新的类意味着，如果你知道一个人可能有也可能
没有车，那么Person类内部的car变量就不应该声明为Car，遭遇某人没有车时把null引用赋值
给它，而是应该直接将其声明为Optional<Car>类型。




变量存在时，Optional类只是对类简单封装。变量不存在时，缺失的值会被建模成一个“空”
的Optional对象，由方法Optional.empty()返回。Optional.empty()方法是一个静态工厂
方法，它返回Optional类的特定单一实例。你可能还有疑惑，null引用和Optional.empty()
有什么本质的区别吗？从语义上，你可以把它们当作一回事儿，但是实际中它们之间的差别非常
大：如果你尝试解引用一个 null ，一定会触发 NullPointerException ，不过使用
Optional.empty()就完全没事儿，它是Optional类的一个有效对象，多种场景都能调用，非
常有用。


使用Optional而不是null的一个非常重要而又实际的语义区别是，第一个例子中，我们
在声明变量时使用的是Optional<Car>类型，而不是Car类型，这句声明非常清楚地表明了这里发生变量缺失是允许的。与此相反，使用Car这样的类型，可能将变量赋值为null，这意味
着你需要独立面对这些，你只能依赖你对业务模型的理解，判断一个null是否属于该变量的有
效范畴


































