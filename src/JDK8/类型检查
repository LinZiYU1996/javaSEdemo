

Lambda的类型是从使用Lambda的上下文推断出来的。上下文（比如，接受它传递的方法的
参数，或接受它的值的局部变量）中Lambda表达式需要的类型称为目标类型。让我们通过一个
例子，看看当你使用Lambda表达式时背后发生了什么。图3-4概述了下列代码的类型检查过程。

List<Apple> heavierThan150g =  filter(inventory, (Apple a) -> a.getWeight() > 150);


类型检查过程可以分解为如下所示。
 首先，你要找出filter方法的声明。
 第二，要求它是Predicate<Apple>（目标类型）对象的第二个正式参数。
 第三，Predicate<Apple>是一个函数式接口，定义了一个叫作test的抽象方法。
 第四，test方法描述了一个函数描述符，它可以接受一个Apple，并返回一个boolean。
 最后，filter的任何实际参数都必须匹配这个要求。
这段代码是有效的，因为我们所传递的Lambda表达式也同样接受Apple为参数，并返回一个
boolean。请注意，如果Lambda表达式抛出一个异常，那么抽象方法所声明的throws语句也必
须与之匹配


















