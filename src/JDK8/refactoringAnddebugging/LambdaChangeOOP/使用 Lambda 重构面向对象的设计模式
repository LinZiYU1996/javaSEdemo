


新的语言特性常常让现存的编程模式或设计黯然失色。比如， Java 5中引入了for-each循
环，由于它的稳健性和简洁性，已经替代了很多显式使用迭代器的情形。Java 7中推出的菱形操
作符（<>）让大家在创建实例时无需显式使用泛型，一定程度上推动了Java程序员们采用类型接
口（type interface）进行程序设计。
对设计经验的归纳总结被称为设计模式①。设计软件时，如果你愿意，可以复用这些方式方
法来解决一些常见问题。这看起来像传统建筑工程师的工作方式，对典型的场景（比如悬挂桥、
拱桥等）都定义有可重用的解决方案。例如，访问者模式常用于分离程序的算法和它的操作对象。
单例模式一般用于限制类的实例化，仅生成一份对象。
Lambda表达式为程序员的工具箱又新添了一件利器。它们为解决传统设计模式所面对的问
题提供了新的解决方案，不但如此，采用这些方案往往更高效、更简单。使用Lambda表达式后，
很多现存的略显臃肿的面向对象设计模式能够用更精简的方式实现了




