


总而言之，流的使用一般包括三件事：
 一个数据源（如集合）来执行一个查询；
 一个中间操作链，形成一条流的流水线；
 一个终端操作，执行流水线，并能生成结果。
流的流水线背后的理念类似于构建器模式。①在构建器模式中有一个调用链用来设置一套配
置（对流来说这就是一个中间操作链），接着是调用built方法（对流来说就是终端操作）。
为方便起见，表4-1和表4-2总结了你前面在代码例子中看到的中间流操作和终端流操作。请
注意这并不能涵盖Stream API提供的操作，

                                    中间操作:

操 作                 类 型                     返回类型            操作参数                        函数描述符
filter             中间              Stream<T>           Predicate<T>                    T -> boolean
map                 中间                      Stream<R>           Function<T, R>                  T -> R
limit               中间                      Stream<T>
sorted              中间                      Stream<T>           Comparator<T>             (T, T) -> int
distinct            中间                          Stream<T>

                                    终端操作:
操 作                 类 型             目 的
forEach             终端          消费流中的每个元素并对其应用 Lambda。这一操作返回 void
count               终端          返回流中元素的个数。这一操作返回 long
collect             终端      把流归约成一个集合，比如 List、Map 甚至是 Integer。详见第 6 章

