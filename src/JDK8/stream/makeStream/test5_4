

斐波纳契元组序列
斐波纳契数列是著名的经典编程练习。下面这个数列就是斐波纳契数列的一部分：0, 1, 1,
2, 3, 5, 8, 13, 21, 34, 55…数列中开始的两个数字是0和1，后续的每个数字都是前两个数字之和。
斐波纳契元组序列与此类似，是数列中数字和其后续数字组成的元组构成的序列：(0, 1),
(1, 1), (1, 2), (2, 3), (3, 5), (5, 8), (8, 13), (13, 21) …
你的任务是用iterate方法生成斐波纳契元组序列中的前20个元素。
让我们帮你入手吧。第一个问题是，iterate方法要接受一个UnaryOperator<t>作为
参数，而你需要一个像(0,1)这样的元组流。你还是可以（这次又是比较草率地）使用一个数组
的两个元素来代表元组。例如，new int[]{0,1}就代表了斐波纳契序列(0, 1)中的第一个元
素。这就是iterate方法的初始值：
Stream.iterate(new int[]{0, 1}, ???)
 .limit(20)
 .forEach(t -> System.out.println("(" + t[0] + "," + t[1] +")"));
在这个测验中，你需要搞清楚???代表的代码是什么。请记住，iterate会按顺序应用给
定的Lambda。


答案：
Stream.iterate(new int[]{0, 1},
 t -> new int[]{t[1], t[0]+t[1]})
 .limit(20)
 .forEach(t -> System.out.println("(" + t[0] + "," + t[1] +")"));
它是如何工作的呢？iterate需要一个Lambda来确定后续的元素。对于元组(3, 5)，其后
续元素是(5, 3+5) = (5, 8)。下一个是(8, 5+8)。看到这个模式了吗？给定一个元组，其后续的元
素是(t[1], t[0] + t[1])。这可以用这个Lambda来计算：t->new int[]{t[1], t[0]+t[1]}。
运行这段代码，你就得到了序列(0, 1), (1, 1), (1, 2), (2, 3), (3, 5), (5, 8), (8, 13), (13, 21)…请注意，
如果你只想打印正常的斐波纳契数列，可以使用map提取每个元组中的第一个元素：
Stream.iterate(new int[]{0, 1},
 t -> new int[]{t[1],t[0] + t[1]})
 .limit(10)
 .map(t -> t[0])
 .forEach(System.out::println);
这段代码将生成斐波纳契数列：0, 1, 1, 2, 3, 5, 8, 13, 21, 34…




