



long count = allArtists.stream()
        .filter(artist -> artist.isFrom("London"))
        .count();


整个过程被分解为两种更简单的操作：过滤和计数，看似有化简为繁之嫌——两种操作是否意味着需要两次循环？事实上，类库设计精妙，只需对艺术家列表迭代一次。

通常，在 Java 中调用一个方法，计算机会随即执行操作：比如，System.out.println
("Hello World"); 会在终端上输出一条信息。Stream 里的一些方法却略有不同，它们虽是
普通的 Java 方法，但返回的 Stream 对象却不是一个新集合，而是创建新集合的配方。现
在，



只过滤，不计数:
allArtists.stream()
    .filter(artist -> artist.isFrom("London"))

    这行代码并未做什么实际性的工作，filter 只刻画出了 Stream，但没有产生新的集合。像
    filter 这样只描述 Stream，最终不产生新集合的方法叫作惰性求值方法；而像 count 这样
    最终会从 Stream 产生值的方法叫作及早求值方法。

如果在过滤器中加入一条 println 语句，来输出艺术家的名字，就能轻而易举地看出其中的不
同。

加入了输出语句。运行这段代码，程序不会输出任何信息！

由于使用了惰性求值，没有输出艺术家的名字

allArtists.stream()
.filter(artist -> {
System.out.println(artist.getName());
return artist.isFrom("London");
});

如果将同样的输出语句加入一个拥有终止操作的流，如计数操作，艺术家的名
字就会被输出

输出艺术家的名字

long count = allArtists.stream()
.filter(artist -> {
System.out.println(artist.getName());
return artist.isFrom("London");
})
.count();


判断一个操作是惰性求值还是及早求值很简单：只需看它的返回值。如果返回值是 Stream，
那么是惰性求值；如果返回值是另一个值或为空，那么就是及早求值。使用这些操作的理
想方式就是形成一个惰性求值的链，最后用一个及早求值的操作返回想要的结果，这正是
它的合理之处。计数的示例也是这样运行的，但这只是最简单的情况：只含两步操作





























